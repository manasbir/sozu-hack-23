{"language":"Solidity","sources":{"src/Dai.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\n// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\n// Copyright (C) 2021 Dai Foundation\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.19;\n\n// Improved Dai token\n\ncontract Dai {\n\n  // --- Auth ---\n  mapping (address => uint256) public wards;\n  function rely(address usr) external auth {\n    wards[usr] = 1;\n    emit Rely(usr);\n  }\n  function deny(address usr) external auth {\n    wards[usr] = 0;\n    emit Deny(usr);\n  }\n  modifier auth {\n    require(wards[msg.sender] == 1, \"Dai/not-authorized\");\n    _;\n  }\n\n  // --- ERC20 Data ---\n  string  public constant name     = \"Dai Stablecoin\";\n  string  public constant symbol   = \"DAI\";\n  string  public constant version  = \"2\";\n  uint8   public constant decimals = 18;\n  uint256 public totalSupply;\n\n  mapping (address => uint256)                      public balanceOf;\n  mapping (address => mapping (address => uint256)) public allowance;\n  mapping (address => uint256)                      public nonces;\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Rely(address indexed usr);\n  event Deny(address indexed usr);\n\n  // --- Math ---\n  function _add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    require((z = x + y) >= x);\n  }\n  function _sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    require((z = x - y) <= x);\n  }\n\n  // --- EIP712 niceties ---\n  uint256 public immutable deploymentChainId;\n  bytes32 private immutable _DOMAIN_SEPARATOR;\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n  constructor() {\n    wards[msg.sender] = 1;\n    emit Rely(msg.sender);\n\n    uint256 chainId;\n    assembly {chainId := chainid()}\n    deploymentChainId = chainId;\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator(chainId);\n  }\n\n  function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\n    return keccak256(\n      abi.encode(\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n        keccak256(bytes(name)),\n        keccak256(bytes(version)),\n        chainId,\n        address(this)\n      )\n    );\n  }\n  function DOMAIN_SEPARATOR() external view returns (bytes32) {\n    uint256 chainId;\n    assembly {chainId := chainid()}\n    return chainId == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\n  }\n\n  // --- ERC20 Mutations ---\n  function transfer(address to, uint256 value) external returns (bool) {\n    require(to != address(0) && to != address(this), \"Dai/invalid-address\");\n    uint256 balance = balanceOf[msg.sender];\n    require(balance >= value, \"Dai/insufficient-balance\");\n\n    balanceOf[msg.sender] = balance - value;\n    balanceOf[to] += value;\n\n    emit Transfer(msg.sender, to, value);\n\n    return true;\n  }\n  function transferFrom(address from, address to, uint256 value) external returns (bool) {\n    require(to != address(0) && to != address(this), \"Dai/invalid-address\");\n    uint256 balance = balanceOf[from];\n    require(balance >= value, \"Dai/insufficient-balance\");\n\n    if (from != msg.sender) {\n      uint256 allowed = allowance[from][msg.sender];\n      if (allowed != type(uint256).max) {\n        require(allowed >= value, \"Dai/insufficient-allowance\");\n\n        allowance[from][msg.sender] = allowed - value;\n      }\n    }\n\n    balanceOf[from] = balance - value;\n    balanceOf[to] += value;\n\n    emit Transfer(from, to, value);\n\n    return true;\n  }\n  function approve(address spender, uint256 value) external returns (bool) {\n    allowance[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n  }\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n    uint256 newValue = _add(allowance[msg.sender][spender], addedValue);\n    allowance[msg.sender][spender] = newValue;\n\n    emit Approval(msg.sender, spender, newValue);\n\n    return true;\n  }\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n    uint256 allowed = allowance[msg.sender][spender];\n    require(allowed >= subtractedValue, \"Dai/insufficient-allowance\");\n    allowed = allowed - subtractedValue;\n    allowance[msg.sender][spender] = allowed;\n\n    emit Approval(msg.sender, spender, allowed);\n\n    return true;\n  }\n\n  // --- Mint/Burn ---\n  function mint(address to, uint256 value) external auth {\n    require(to != address(0) && to != address(this), \"Dai/invalid-address\");\n    balanceOf[to] = balanceOf[to] + value; // note: we don't need an overflow check here b/c balanceOf[to] <= totalSupply and there is an overflow check below\n    totalSupply   = _add(totalSupply, value);\n\n    emit Transfer(address(0), to, value);\n  }\n  function burn(address from, uint256 value) external {\n    uint256 balance = balanceOf[from];\n    require(balance >= value, \"Dai/insufficient-balance\");\n\n    if (from != msg.sender && wards[msg.sender] != 1) {\n      uint256 allowed = allowance[from][msg.sender];\n      if (allowed != type(uint256).max) {\n        require(allowed >= value, \"Dai/insufficient-allowance\");\n\n        allowance[from][msg.sender] = allowed - value;\n      }\n    }\n\n    balanceOf[from] = balance - value; // note: we don't need overflow checks b/c require(balance >= value) and balance <= totalSupply\n    totalSupply     = totalSupply - value;\n\n    emit Transfer(from, address(0), value);\n  }\n\n  // --- Approve by signature ---\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\n    require(block.timestamp <= deadline, \"Dai/permit-expired\");\n\n    uint256 chainId;\n    assembly {chainId := chainid()}\n\n    bytes32 digest =\n      keccak256(abi.encodePacked(\n          \"\\x19\\x01\",\n          chainId == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId),\n          keccak256(abi.encode(\n            PERMIT_TYPEHASH,\n            owner,\n            spender,\n            value,\n            nonces[owner]++,\n            deadline\n          ))\n      ));\n\n    require(owner != address(0) && owner == ecrecover(digest, v, r, s), \"Dai/invalid-permit\");\n\n    allowance[owner][spender] = value;\n    emit Approval(owner, spender, value);\n  }\n}"}},"settings":{"remappings":["ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","solady/=lib/solady/src/","lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/","lib/solady:ds-test/=lib/solady/lib/ds-test/src/","lib/solady:forge-std/=lib/solady/test/utils/forge-std/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"london","libraries":{}}}